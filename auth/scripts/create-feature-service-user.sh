#!/usr/bin/env bash

set -eo pipefail

usage() {
  echo "Usage: $(basename "$0") <username> <email> <phone>"
  exit 1
}

[[ "$#" -lt 3 ]] && usage

username="$1"
email="$2"
phone_number="$3"
user_pool_id="${4:-eu-west-1_bxc84ueLv}"
app_client_id="${5:-2n509urhek229vnc30a6ddvdup}"
autogenerated_pass=false

echo -n "Password (leave empty for auto generated):"
read -s password

if [[ -z "$pass" ]]; then
  password_hex="$(openssl rand -hex 16)"
  password="${password_hex:0:30}A@"
  autogenerated_pass=true
fi

aws cognito-idp admin-create-user \
    --user-pool-id "$user_pool_id" \
    --username "$username" \
    --temporary-password "$password" \
    --user-attributes Name=email,Value="$email" Name=phone_number,Value="$phone_number" \
    --message-action SUPPRESS

challenge=$(aws cognito-idp admin-initiate-auth --user-pool-id $user_pool_id --client-id $app_client_id --auth-flow ADMIN_NO_SRP_AUTH --auth-parameters USERNAME=$username,PASSWORD=$password)

echo "THE CHALLENGE"
echo $challenge
challenge_session=$(echo $challenge | jq '.Session' | sed s/\"//g)
challenge_name=$(echo $challenge | jq '.ChallengeName' | sed s/\"//g)

aws cognito-idp admin-respond-to-auth-challenge \
  --user-pool-id "$user_pool_id" \
  --client-id "$app_client_id" \
  --challenge-name "$challenge_name" \
  --challenge-responses NEW_PASSWORD="$password",USERNAME="$username" \
  --session=$challenge_session

if [[ "$autogenerated_pass" = true ]]; then
  echo "Cognito User with username '$username' and password '$password' created successfully!"
else
  echo "Cognito User with username '$username' created successfully!"
fi
